// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oaXUEGapRcCGqowHuDEpD8
// Component: 3bfx_b85LIwJ
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsoyplvy8WjIzj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Oyplvy8WjIZJ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: oaXUEGapRcCGqowHuDEpD8/projectcss
import sty from "./PlasmicProjectHeader.module.css"; // plasmic-import: 3bfx_b85LIwJ/css

createPlasmicElementProxy;

export const PlasmicProjectHeader__VariantProps = new Array();

export const PlasmicProjectHeader__ArgProps = new Array(
  "title",
  "role",
  "timeline"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProjectHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsoyplvy8WjIzj()
  });
  return (
    <Stack__
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.columns__oyakt)}>
        <div className={classNames(projectcss.all, sty.column__eJvy3)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qt1X0
            )}
          >
            {"BRANDING"}
          </div>
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(projectcss.all, projectcss.h1, sty.h1)}
          >
            {renderPlasmicSlot({
              defaultContents: "Premium SaaS Design",
              value: args.title,
              className: classNames(sty.slotTargetTitle)
            })}
          </h1>
        </div>
        <div className={classNames(projectcss.all, sty.column__wrHx)}>
          <div className={classNames(projectcss.all, sty.columns__b3T2Z)}>
            <div className={classNames(projectcss.all, sty.column__vhiOg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1TpuN
                )}
              >
                {"ROLE"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___3D8X)}>
                {renderPlasmicSlot({
                  defaultContents: "UI/UX Designer",
                  value: args.role,
                  className: classNames(sty.slotTargetRole)
                })}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__kZTkp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9RtYw
                )}
              >
                {"TIMELINE"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___15Yb)}>
                {renderPlasmicSlot({
                  defaultContents: "Sep - Dec 2023",
                  value: args.timeline,
                  className: classNames(sty.slotTargetTimeline)
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "h1"],
  h1: ["h1"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProjectHeader__ArgProps,
          internalVariantPropNames: PlasmicProjectHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProjectHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectHeader";
  } else {
    func.displayName = `PlasmicProjectHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectHeader = Object.assign(
  // Top-level PlasmicProjectHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    // Metadata about props expected for PlasmicProjectHeader
    internalVariantProps: PlasmicProjectHeader__VariantProps,
    internalArgProps: PlasmicProjectHeader__ArgProps
  }
);

export default PlasmicProjectHeader;
/* prettier-ignore-end */
